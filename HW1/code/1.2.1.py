# -*- coding: utf-8 -*-
"""1.2.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QzW-hOmu2Ifc-jsNSwRw8T4794hK7X9C
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import math
tf.logging.set_verbosity(tf.logging.ERROR)  # or any {DEBUG, INFO, WARN, ERROR, FATAL}

from tensorflow.examples.tutorials.mnist import input_data
data = input_data.read_data_sets('data/MNIST/', one_hot=True)

data.test.cls = np.argmax(data.test.labels, axis=1)

# We know that MNIST images are 28 pixels in each dimension.
img_size = 28

# Images are stored in one-dimensional arrays of this length.
img_size_flat = img_size * img_size

# Tuple with height and width of images used to reshape arrays.
img_shape = (img_size, img_size)

# Number of colour channels for the images: 1 channel for gray-scale.
num_channels = 1

# Number of classes, one class for each of 10 digits.
num_classes = 10

x = tf.placeholder(tf.float32, shape=[None, img_size_flat], name='x')

x_image = tf.reshape(x, [-1, img_size, img_size, num_channels])

y_true = tf.placeholder(tf.float32, shape=[None, num_classes], name='y_true')

y_true_cls = tf.argmax(y_true, dimension=1)

net = tf.layers.flatten(x_image)
net = tf.layers.dense(inputs=net, name='layer_fc1',
                      units=128, activation=tf.nn.relu)
net = tf.layers.dense(inputs=net, name='layer_fc2',
                      units=128, activation=tf.nn.relu)
logits = tf.layers.dense(inputs=net, name='layer_fc_out',
                      units=num_classes, activation=None)

y_pred = tf.nn.softmax(logits=logits)
y_pred_cls = tf.argmax(y_pred, dimension=1)

cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y_true, logits=logits)

loss = tf.reduce_mean(cross_entropy)

opt = tf.train.AdamOptimizer(learning_rate=1e-4)
optimizer = opt.minimize(loss)

correct_prediction = tf.equal(y_pred_cls, y_true_cls)
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

trainable_var_list = tf.trainable_variables()

def get_weights_variable(layer_name):
    with tf.variable_scope(layer_name, reuse=True):
        variable = tf.get_variable('kernel')
    return variable

weights_fc1 = get_weights_variable(layer_name='layer_fc1')
weights_fc2 = get_weights_variable(layer_name='layer_fc2')
weights_fc_out = get_weights_variable(layer_name='layer_fc_out')

train_batch_size = 64
def optimize(num_iterations):

    global total_iterations

    for i in range(0,
                    num_iterations):

        x_batch, y_true_batch = data.train.next_batch(train_batch_size)

        feed_dict_train = {x: x_batch,
                           y_true: y_true_batch}

        session.run(optimizer, feed_dict=feed_dict_train)

        los, acc = session.run([loss, accuracy], feed_dict=feed_dict_train)
#    if i%3==0:
      accu_training_list.append(acc)

epochtimes=18
## one layer
singleresult=[]
wholeresult=[]
accu_training_list=[]
for times in range(0,8):
  session = tf.Session()
  session.run(tf.global_variables_initializer())
  for epoch in range(0,epochtimes):
    optimize(num_iterations=1000)
    if epoch%3==0:
      layer1=session.run(weights_fc1)
      layer2=session.run(weights_fc2)
      layer3=session.run(weights_fc_out)

      singlelayer=layer1.reshape(1,layer1.size)
      wholelayer=np.hstack((layer1.reshape(1,layer1.size),layer2.reshape(1,layer2.size),layer3.reshape(1,layer3.size))).ravel()

      singleresult.append(singlelayer)
      wholeresult.append(wholelayer)

from sklearn.decomposition import PCA

pca = PCA(n_components=2)
result2=pca.fit_transform(np.array(singleresult).reshape(np.array(singleresult).shape[0],np.array(singleresult).shape[2]))

x=[i[0] for i in result2]
y=[i[1] for i in result2]
x=np.array(x).reshape(8,int(epochtimes/3))
y=np.array(y).reshape(8,int(epochtimes/3))

accu_training_list=[i[2] for i in np.array(accu_training_list).reshape(int(epochtimes/3)*8,3)]
accu=np.array(accu_training_list).reshape(8,int(epochtimes/3))

from matplotlib.pyplot import cm
color=iter(cm.rainbow(np.linspace(0,1,8)))
for times in range(0,8):
  plt.scatter(x[times], y[times],s=0.01)
  c=next(color)
  for i in range(0,int(epochtimes/3)):
    plt.text(x[times][i], y[times][i],format(accu[times][i]*100,'.1f'),c=c)
plt.show()

pca = PCA(n_components=2)
result2=pca.fit_transform(np.array(wholeresult))

x=[i[0] for i in result2]
y=[i[1] for i in result2]
x=np.array(x).reshape(8,int(epochtimes/3))
y=np.array(y).reshape(8,int(epochtimes/3))

accu=np.array(accu_training_list).reshape(8,int(epochtimes/3))

from matplotlib.pyplot import cm
color=iter(cm.rainbow(np.linspace(0,1,8)))
for times in range(0,8):
  plt.scatter(x[times], y[times],s=0.01)
  c=next(color)
  for i in range(0,int(epochtimes/3)):
    plt.text(x[times][i], y[times][i],format(accu[times][i]*100,'.1f'),c=c)
plt.show()

